name: build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-10.15]

    steps:
      - uses: actions/checkout@v2

      - name: Install google benchmark
        run: |
          # Check out the library.
          git clone https://github.com/google/benchmark.git
          # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory.
          git clone https://github.com/google/googletest.git benchmark/googletest
          # Go to the library root directory
          cd benchmark
          # Make a build directory to place the build output.
          cmake -E make_directory "build"
          # Generate build system files with cmake.
          cmake -DCMAKE_BUILD_TYPE=Release -S . -B "build"
          # Build the library and install
          # -j flag works in Linux and MacOS, Windows requires /MP (add later)
          # sudo needed for Linux, not for Windows and MacOS
          if [ "$RUNNER_OS" == "Linux" ]; then
              cmake --build "build" --config Release -- -j2
              sudo cmake --install "build" --config Release
          elif [ "$RUNNER_OS" == "Windows" ]; then
              cmake --build "build" --config Release
              cmake --install "build" --config Release
          elif [ "$RUNNER_OS" == "macOS" ]; then
              cmake --build "build" --config Release -- -j2
              cmake --install "build" --config Release
          else
              echo "$RUNNER_OS not supported"
              exit 1
          fi
        shell: bash

      - name: Build via cmake
        run: |
          # make build directory
          cmake -E make_directory "build" 
          # write cmake files to build
          cmake -DCMAKE_BUILD_TYPE=Release -S . -B "build"
          # build
          # -j flag works in Linux and MacOS, Windows requires /MP (add later)
          if [ "$RUNNER_OS" == "Windows" ]; then
              cmake --build "build" --config Release
          elif [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
              cmake --build "build" --config Release -- -j2
          else
              echo "$RUNNER_OS not supported"
              exit 1
          fi
        shell: bash
